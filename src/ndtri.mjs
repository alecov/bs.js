// https://github.com/jeremybarnes/cephes/blob/master/cprob/ndtri.c

import { polevl, p1evl } from "./polevl.mjs";

const P0 = [
  -5.99633501014107895267e1, +9.80010754185999661536e1,
  -5.66762857469070293439e1, +1.39312609387279679503e1, -1.23916583867381258016,
];

const Q0 = [
  +1.95448858338141759834, +4.67627912898881538453, +8.63602421390890590575e1,
  -2.25462687854119370527e2, +2.00260212380060660359e2,
  -8.20372256168333339912e1, +1.59056225126211695515e1, -1.18331621121330003142,
];

const P1 = [
  +4.05544892305962419923, +3.15251094599893866154e1, +5.71628192246421288162e1,
  +4.408050738932008347e1, +1.46849561928858024014e1, +2.18663306850790267539,
  -1.40256079171354495875e-1, -3.50424626827848203418e-2,
  -8.57456785154685413611e-4,
];

const Q1 = [
  +1.57799883256466749731e1, +4.53907635128879210584e1,
  +4.1317203825467203044e1, +1.50425385692907503408e1, +2.50464946208309415979,
  -1.42182922854787788574e-1, -3.80806407691578277194e-2,
  -9.33259480895457427372e-4,
];

const P2 = [
  +3.2377489177694603597, +6.91522889068984211695, +3.93881025292474443415,
  +1.33303460815807542389, +2.01485389549179081538e-1,
  +1.23716634817820021358e-2, +3.01581553508235416007e-4,
  +2.65806974686737550832e-6, +6.2397453918498329373e-9,
];

const Q2 = [
  +6.02427039364742014255, +3.67983563856160859403, +1.37702099489081330271,
  +2.1623699359449663589e-1, +1.34204006088543189037e-2,
  +3.28014464682127739104e-4, +2.89247864745380683936e-6,
  +6.79019408009981274425e-9,
];

export function erfinv(x) {
  return Math.SQRT2 * ndtri((x + 1) / 2);
}

export function ndtri(y0) {
  if (y0 <= 0) return -Infinity;
  if (y0 >= 1) return +Infinity;
  const expm2 = Math.exp(-2);
  const b = y0 > 1 - expm2;
  const y = b ? 1 - y0 : y0;
  if (y > expm2) {
    const y1 = y - 0.5;
    const y2 = y1 * y1;
    const y3 = (y2 * polevl(y2, P0)) / p1evl(y2, Q0);
    return Math.sqrt(2 * Math.PI) * (y1 + y1 * y3);
  }
  const x = Math.sqrt(-2 * Math.log(y));
  const z = 1 / x;
  const [p, q] = x < 8 ? [P1, Q1] : [P2, Q2];
  const x0 = x - Math.log(x) * z;
  const x1 = (z * polevl(z, p)) / p1evl(z, q);
  return b ? x0 - x1 : x1 - x0;
}
