// https://github.com/jeremybarnes/cephes/blob/master/cprob/ndtri.c

import { polevl, p1evl } from "./polevl.js";

const P0 = [
    -5.99633501014107895267E+01,
    +9.80010754185999661536E+01,
    -5.66762857469070293439E+01,
    +1.39312609387279679503E+01,
    -1.23916583867381258016E+00,
];

const Q0 = [
    +1.95448858338141759834E+00,
    +4.67627912898881538453E+00,
    +8.63602421390890590575E+01,
    -2.25462687854119370527E+02,
    +2.00260212380060660359E+02,
    -8.20372256168333339912E+01,
    +1.59056225126211695515E+01,
    -1.18331621121330003142E+00,
];

const P1 = [
    +4.05544892305962419923E+00,
    +3.15251094599893866154E+01,
    +5.71628192246421288162E+01,
    +4.40805073893200834700E+01,
    +1.46849561928858024014E+01,
    +2.18663306850790267539E+00,
    -1.40256079171354495875E-01,
    -3.50424626827848203418E-02,
    -8.57456785154685413611E-04,
];

const Q1 = [
    +1.57799883256466749731E+01,
    +4.53907635128879210584E+01,
    +4.13172038254672030440E+01,
    +1.50425385692907503408E+01,
    +2.50464946208309415979E+00,
    -1.42182922854787788574E-01,
    -3.80806407691578277194E-02,
    -9.33259480895457427372E-04,
];

const P2 = [
    +3.23774891776946035970E+00,
    +6.91522889068984211695E+00,
    +3.93881025292474443415E+00,
    +1.33303460815807542389E+00,
    +2.01485389549179081538E-01,
    +1.23716634817820021358E-02,
    +3.01581553508235416007E-04,
    +2.65806974686737550832E-06,
    +6.23974539184983293730E-09,
];

const Q2 = [
    +6.02427039364742014255E+00,
    +3.67983563856160859403E+00,
    +1.37702099489081330271E+00,
    +2.16236993594496635890E-01,
    +1.34204006088543189037E-02,
    +3.28014464682127739104E-04,
    +2.89247864745380683936E-06,
    +6.79019408009981274425E-09,
];

export function erfinv(x) {
    return Math.SQRT2*ndtri((x + 1)/2);
}

export function ndtri(y0) {
    if (y0 <= 0)
        return -Infinity;
    if (y0 >= 1)
        return +Infinity;
    const expm2 = Math.exp(-2);
    const b = y0 > 1 - expm2;
    const y = b ? 1 - y0 : y0;
    if (y > expm2) {
        const y1 = y - 0.5;
        const y2 = y1*y1;
        const y3 = y2*polevl(y2, P0)/p1evl(y2, Q0);
        return Math.sqrt(2*Math.PI)*(y1 + y1*y3);
    }
    const x = Math.sqrt(-2*Math.log(y));
    const z = 1/x;
    const [p, q] = x < 8 ? [P1, Q1] : [P2, Q2];
    const x0 = x - Math.log(x)*z;
    const x1 = z*polevl(z, p)/p1evl(z, q);
    return b ? x0 - x1 : x1 - x0;
}
